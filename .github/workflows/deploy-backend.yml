name: Deploy Backend to EC2

on:
  push:
    branches: [ master, main ]
    paths:
      - 'backend/**'
      - 'database/**'
      - '.github/workflows/deploy-backend.yml'

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2

      - name: Create SSH key
        run: |
          mkdir -p ~/.ssh/
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/deploy.key
          chmod 600 ~/.ssh/deploy.key
          ssh-keyscan -H ${{ secrets.HOST }} >> ~/.ssh/known_hosts

      - name: Stop running application
        run: |
          ssh -i ~/.ssh/deploy.key ${{ secrets.USERNAME }}@${{ secrets.HOST }} 'pm2 delete plants-api || true'

      - name: Prepare environment
        run: |
          # Create app directory if it doesn't exist
          ssh -i ~/.ssh/deploy.key ${{ secrets.USERNAME }}@${{ secrets.HOST }} '
            mkdir -p ~/app/database
            chmod 777 ~/app/database
          '

      - name: Copy backend files
        run: |
          # Copy backend files
          scp -i ~/.ssh/deploy.key -r ./backend/* ${{ secrets.USERNAME }}@${{ secrets.HOST }}:~/app/
          
          # Copy database SQL scripts
          scp -i ~/.ssh/deploy.key -r ./database/*.sql ${{ secrets.USERNAME }}@${{ secrets.HOST }}:~/app/database/

      - name: Setup environment variables
        run: |
          ssh -i ~/.ssh/deploy.key ${{ secrets.USERNAME }}@${{ secrets.HOST }} 'cat > ~/app/.env << EOL
          PORT=3000
          DATABASE_PATH=database/plants.db
          NODE_ENV=production
          EOL'

      - name: Install dependencies and start application
        run: |
          ssh -i ~/.ssh/deploy.key ${{ secrets.USERNAME }}@${{ secrets.HOST }} '
            cd ~/app
            npm install
            npm run build || true
            pm2 start server.ts --name "plants-api" --interpreter ./node_modules/.bin/ts-node
            pm2 save
          '

      - name: Verify deployment
        run: |
          # Wait for the API to start
          sleep 5
          
          # Test the health endpoint
          RESPONSE=$(curl -s -o /dev/null -w "%{http_code}" http://${{ secrets.HOST }}:3000/api/health)
          
          if [ "$RESPONSE" = "200" ]; then
            echo "✅ API deployment successful! Health check returned 200 OK"
          else
            echo "❌ API deployment may have issues. Health check returned: $RESPONSE"
            # Don't fail the workflow, but log the issue
          fi